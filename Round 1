import random

# Create a deck of cards
suits = ["D", "H", "C", "S"]
ranks = ["A", "K", "Q", "J", "10", "9", "8", "7", "6", "5", "4", "3", "2"]
deck = [rank + suit for suit in suits for rank in ranks] * 2

# Shuffle the deck
random.shuffle(deck)

# Initialize discard pile
discard_pile = []

# Initialize player data = name, hand, play_area, laid_down, buy_count
player_data = [   
    ["Alice", [], [], False, 0],
    ["Bob", [], [], False, 0],
    ["Charlie", [], [], False, 0],
    ["Dawn", [], [], False, 0]
]

# Deal cards to players
def deal_cards(deck, player_data):
    for i in range(10):
        for j in range(4):
            card = deck.pop(0)
            player_data[j][1].append(card)

    # Print player hands
    for player in player_data:
        print(player[0] + "'s Hand:", player[1])

    # Return updated deck and player data
    return deck, player_data
    
# Deal cards to players
deck, player_data = deal_cards(deck, player_data)

def draw_card():

    print("\n" + player_data[turn_index][0] + "'s turn to draw") 
    player_data[turn_index][1].sort(key=lambda card: ranks.index(card[:-1]), reverse=True)
    print(player_data[turn_index][0], "'s Hand:", player_data[turn_index][1])
    drawn_card = []
    cards_match = []
    hand = player_data[turn_index][1]
    if discard_pile:
        top_card = discard_pile[len(discard_pile) - 1]
        cards_match = [card for card in player_data[turn_index][1] if card[:-1] == top_card[:-1]]
    else:
        top_card = []

    if player_data[turn_index][3] == True and discard_pile:
        for i in range(len(player_data)):
            for card in player_data[i][2]:
                if card[:-1] == top_card[:-1]:
                    drawn_card = discard_pile.pop()
                    player_data[turn_index][1].append(drawn_card)
                    print(player_data[turn_index][0] + " drew", drawn_card, "from the discard pile to play in set")
                    return
        if ranks.index(top_card[:-1]) > ranks.index(hand[-1][:-1]):
            drawn_card = discard_pile.pop()
            player_data[turn_index][1].append(drawn_card)
            print(player_data[turn_index][0] + " drew", drawn_card, "from the discard pile cause lower")
    elif player_data[turn_index][3] == False and discard_pile:
        if len(cards_match) >= 2:
            cards_match.clear()
            drawn_card = discard_pile.pop()
            player_data[turn_index][1].append(drawn_card)
            print(player_data[turn_index][0] + " drew", drawn_card, "from the discard pile cause match pair for set")
    if len(drawn_card) == 0:
        drawn_card = deck.pop(0)
        player_data[turn_index][1].append(drawn_card)
        print(player_data[turn_index][0] + " drew", drawn_card, "from the deck")
    cards_match.clear()
    
def lay_down_sets():
    # Check if the player has already laid down
    if player_data[turn_index][3] == True:
        return

    # Create a dictionary to count the number of cards of each rank in the hand
    rank_counts = {}
    for card in player_data[turn_index][1]:
        rank = card[:-1]
        rank_counts[rank] = rank_counts.get(rank, 0) + 1

    # Find all sets of three or more cards in the hand
    sets = []
    for rank, count in rank_counts.items():
        if count >= 3:
            set_cards = [card for card in player_data[turn_index][1] if card[:-1] == rank]
            sets.append(set_cards)

    # Sort the sets by rank in descending order
    sets.sort(key=lambda set_cards: ranks.index(set_cards[0][:-1]), reverse=True)
    
    # Split if just one set of 6+
    if len(sets) < 2:
        for set_cards in sets:
            if len(set_cards) >= 6:
                new_set = [set_cards.pop() for _ in range(3)]
                sets.append(new_set)
                sets.append(set_cards)
                print("split set of 6+")
        if len(sets) < 2:
            return
                
    # Check if the player has sets
    if len(sets) == 2:
        for set_cards in sets:
            for card in set_cards:
                player_data[turn_index][1].remove(card)
                player_data[turn_index][2].append(card)
        print(player_data[turn_index][0], " laid down ", sets, "only 2")
    else:
        backup = sets
        for i in range(3):
            for laid_set in player_data[i][2]:
                for card in sets:
                    if card[0][:-1] == laid_set[:-1]:
                        sets.remove(card)
                if len(sets) < 2:
                    backup = sets
            if len(sets) < 2:
                sets = backup
        lowest_set = None
        for set_cards in sets:
            if lowest_set is None or ranks.index(set_cards[0][:-1]) < ranks.index(lowest_set[0][:-1]):
                if not any(lowest_set is not None and lowest_set[0][:-1] == set_card[0][:-1] for set_card in player_data[i][2] for i in range(len(player_data))):
                    lowest_set = set_cards
        second_lowest_set = None
        for set_cards in sets:
            if set_cards == lowest_set:
                continue
            if second_lowest_set is None or ranks.index(set_cards[0][:-1]) < ranks.index(second_lowest_set[0][:-1]):
                if not any(second_lowest_set is not None and second_lowest_set[0][:-1] == set_card[0][:-1] for set_card in player_data[i][2] for i in range(len(player_data))):
                    second_lowest_set = set_cards
        # Lay down the two highest ranking sets
        if lowest_set is not None and second_lowest_set is not None:
            for set_ in [lowest_set, second_lowest_set]:
                for card in set_:
                    player_data[turn_index][1].remove(card)
                    player_data[turn_index][2].append(card)
            print(player_data[turn_index][0], " laid down ", lowest_set, second_lowest_set, "2 highest")
        else:
            for set_ in sets[-2:]:
                for card in set_:
                    player_data[turn_index][1].remove(card)
                    player_data[turn_index][2].append(card)
            print(player_data[turn_index][0], " laid down ", sets[-2:], "else two highest")
                        
def play_card():
    for i in range(len(player_data)):
        hand = player_data[turn_index][1]
        name = player_data[i][0]
        card_index = 0
        while len(player_data[turn_index][1]) > 1 and card_index < len(player_data[turn_index][1]):
            card = hand[card_index]
            if card not in hand:
                card_index = 0
                continue
            for set_cards in player_data[i][2]:
                if card[:-1] == set_cards[:-1] and card in player_data[turn_index][1]:
                    player_data[turn_index][1].remove(card)
                    player_data[i][2].append(card)
                    player_data[i][2].sort(key=lambda card: ranks.index(card[:-1]), reverse=True)
                    print(card, " was added to", name, "'s set")
                    card_index = 0
                    break
            else:
                card_index += 1
                
def buy_card():      
    # Check if player about to draw wants top card in the discard pile
    top_card = discard_pile[-1] if discard_pile else None
    veto = False
    if top_card:
        for rank in [card for card in player_data[turn_index][1] if card[:-1] == top_card[:-1]]:
            if len([card for card in player_data[turn_index][1] if card[:-1] == rank[:-1]]) == 2 or len([card for card in player_data[turn_index][1] if card[:-1] == rank[:-1]]) == 5:
                if player_data[turn_index][3] == False:
                    for i in range(len(player_data)):
                        for card in player_data[i][2]:
                            if card[:-1] == top_card[:-1]:
                                veto = True
                                print(player_data[turn_index][0], " vetoed the buying process")
                                break
            rank = ""
    next_counts = {}
    for card in player_data[(turn_index + 1) % len(player_data)][1]:
        rank = card[:-1]
        next_counts[rank] = next_counts.get(rank, 0) + 1
    nextnext_counts = {}
    for card in player_data[(turn_index + 2) % len(player_data)][1]:
        rank = card[:-1]
        nextnext_counts[rank] = nextnext_counts.get(rank, 0) + 1
    nextsets = []
    for rank, count in next_counts.items():
        if count >= 3:
            set_cards = [card for card in player_data[(turn_index + 1) % len(player_data)][1] if card[:-1] == rank]
            nextsets.append(set_cards)
    nextnextsets = []
    for rank, count in nextnext_counts.items():
        if count >= 3:
            set_cards = [card for card in player_data[(turn_index + 2) % len(player_data)][1] if card[:-1] == rank]
            nextnextsets.append(set_cards)

    # Check if next players can and want to buy top card from discard pile
    player_bought = False
    
    if top_card and veto == False:
        for rank in [card for card in player_data[(turn_index + 1) % len(player_data)][1] if card[:-1] == top_card[:-1]]:
            if len([card for card in player_data[(turn_index + 1) % len(player_data)][1] if card[:-1] == rank[:-1]]) == 2 or len([card for card in player_data[(turn_index + 1) % len(player_data)][1] if card[:-1] == rank[:-1]]) == 5:
                if player_data[(turn_index + 1) % len(player_data)][4] < 3 and player_data[(turn_index + 1) % len(player_data)][3] == False and player_bought == False and len(nextsets) < 2:
                    buy_card = top_card
                    if len(discard_pile) == 1:
                        discard_pile.remove(discard_pile[-1])
                    elif len(discard_pile) > 1:
                        discard_pile.remove(discard_pile[len(discard_pile) - 1])
                    interest_card = deck.pop(0)
                    player_data[(turn_index + 1) % len(player_data)][1].append(buy_card)
                    player_data[(turn_index + 1) % len(player_data)][1].append(interest_card)
                    print(player_data[(turn_index + 1) % len(player_data)][0], "bought the last discard", buy_card)
                    player_bought = True
                    player_data[(turn_index + 1) % len(player_data)][4] += 1
            rank = ""
        for rank in [card for card in player_data[(turn_index + 2) % len(player_data)][1] if card[:-1] == top_card[:-1]]:
            if len([card for card in player_data[(turn_index + 2) % len(player_data)][1] if card[:-1] == rank[:-1]]) == 2 or len([card for card in player_data[(turn_index + 2) % len(player_data)][1] if card[:-1] == rank[:-1]]) == 5:
                if player_data[(turn_index + 2) % len(player_data)][4] < 3 and player_bought == False and player_data[(turn_index + 2) % len(player_data)][3] == False and len(nextnextsets) < 2:
                    buy_card = top_card
                    if len(discard_pile) == 1:
                        discard_pile.remove(discard_pile[-1])
                    elif len(discard_pile) > 1:
                        discard_pile.remove(discard_pile[len(discard_pile) - 1])
                    interest_card = deck.pop(0)
                    player_data[(turn_index + 2) % len(player_data)][1].append(buy_card)
                    player_data[(turn_index + 2) % len(player_data)][1].append(interest_card)
                    print(player_data[(turn_index + 2) % len(player_data)][0], "bought the last discard", buy_card)
                    player_data[(turn_index + 2) % len(player_data)][4] += 1
                    player_bought = True
            rank = ""
            
def discard():
    discard_choice = None
    pairs = []
    sets = []
    potential_discard = []

    if player_data[turn_index][3] == True:
        player_data[turn_index][1].sort(key=lambda card: ranks.index(card[:-1]))
        rank_cards = [card for card in player_data[turn_index][1]]
        potential_discard.append(rank_cards)
    else:
        for rank in ranks:
            player_data[turn_index][1].sort(key=lambda card: ranks.index(card[:-1]))
            rank_cards = [card for card in player_data[turn_index][1] if card.startswith(rank)]
            if len(rank_cards) == 1:
                potential_discard.append(rank_cards)
        if not potential_discard:
            for rank in ranks:
                rank_cards = [card for card in player_data[turn_index][1] if card.startswith(rank)]
                if len(rank_cards) == 4 or len(rank_cards) == 5:
                    potential_discard.append(rank_cards)
        if not potential_discard:
            for rank in ranks:
                rank_cards = [card for card in player_data[turn_index][1] if card.startswith(rank)]
                if len(rank_cards) == 2:
                    potential_discard.append(rank_cards)
        if not potential_discard:
            for rank in ranks:
                rank_cards = [card for card in player_data[turn_index][1] if card.startswith(rank)]
                if len(rank_cards) == 3:
                    potential_discard.append(rank_cards)
    last_check = potential_discard
    if len(potential_discard) > 0:
        for i in range(len(player_data)):
            for sets in player_data[i][2]:
                for card in potential_discard:
                    if card[0][:-1] == sets[:-1]:
                        if player_data[(turn_index + 1) % 4][3] == True:
                            potential_discard.remove(card)
                            print("removed ", card, " from pot discards")
    if len(potential_discard) == 0 and len(player_data[turn_index][1]) > 1:
        potential_discard = last_check
        discard_choice = player_data[turn_index][1][len(player_data[turn_index][1]) - 1]
    else:
        discard_choice = potential_discard[0][0]
    # Remove the card from player's hand and discard it
    if len(player_data[turn_index][1]) > 1:
        player_data[turn_index][1].remove(discard_choice)
        discard_pile.append(discard_choice)
        print(player_data[turn_index][0] + " discarded", discard_choice)
    else:
        for card in player_data[turn_index][1]:
            discard_pile.append(card)
            player_data[turn_index][1].remove(card)
            print(player_data[turn_index][0] + " discarded", card)
    check_for_empty_hand()
            
# Define a function to check if a player's hand is empty and exit the game if so
def check_for_empty_hand():
    if len(player_data[turn_index][1]) == 0:
        print(player_data[turn_index][0], "won the round !")
        for i in range(len(player_data)):
            hand = player_data[i][1]
            score = 0
            for card in [card for card in hand]:
                if card[:-1] == "A":
                    score += 15
                elif card[:-1].isdigit():
                    score += int(card[:-1])
                else:
                    score += 10
            print(player_data[i][0], "'s score: ", score)
        exit()

# Set starting player
turn_index = 0

while True:
#Start play
    #Check for buyers
    if discard_pile:
        buy_card()
    
    draw_card()
    
    if player_data[turn_index][2]:
        print(player_data[turn_index][0] + "'s sets:", player_data[turn_index][2])
    print(player_data[turn_index][0] + "'s Hand:", player_data[turn_index][1])
        
    # Check for sets and lay down if the player hasn't laid down already
    if player_data[turn_index][3] == False:
        lay_down_sets()
    # Set laid down to true
    if len(player_data[turn_index][2]) > 0:
        player_data[turn_index][3] = True
 
    if player_data[turn_index][3] == True:
        play_card()
    
    discard()
    
    # if deck empty collect discards and shuffle twice
    if not deck:
        deck = discard_pile[4:]
        discard_pile = discard_pile[:4]
        random.shuffle(deck)
        random.shuffle(deck)
        print("Discard pile", discard_pile)

    # Switch to next player
    turn_index = (turn_index + 1) % 4
